Que son los patrones de diseño?

Los patrones de diseño son la base para la búsqueda de soluciones a problemas 
comunes en el desarrollo de software y otros ámbitos referentes al diseño de 
interacción o interfaces.

Un patrón de diseño resulta ser una solución a un problema de diseño. Para que 
una solución sea considerada un patrón debe poseer ciertas características. 
Una de ellas es que debe haber comprobado su efectividad resolviendo problemas 
similares en ocasiones anteriores. Otra es que debe ser reutilizable, lo que 
significa que es aplicable a diferentes problemas de diseño en distintas 
circunstancias.


Reseña historica:

En 1979 el arquitecto Christopher Alexander aportó al mundo de la arquitectura 
el libro The Timeless Way of Building; en él proponía el aprendizaje y uso de 
una serie de patrones para la construcción de edificios de una mayor calidad, en
 la que esa mayor calidad se refería a la arquitectura antigua y la menor 
calidad correspondía a la arquitectura moderna, que el romper con la 
arquitectura antigua había perdido esa conexión con lo que las personas 
consideraban que era calidad.

En palabras de este autor, "Cada patrón describe un problema que ocurre 
infinidad de veces en nuestro entorno, así como la solución al mismo, de tal 
modo que podemos utilizar esta solución un millón de veces más adelante sin 
tener que volver a pensarla otra vez."

Los patrones que Christopher Alexander y sus colegas definieron, publicados en 
un volumen denominado A Pattern Language, son un intento de formalizar y plasmar
 de una forma práctica generaciones de conocimiento arquitectónico. Los patrones
 no son principios abstractos que requieran su redescubrimiento para obtener una
 aplicación satisfactoria, ni son específicos a una situación particular o 
cultural; son algo intermedio. Un patrón define una posible solución correcta 
para un problema de diseño dentro de un contexto dado, describiendo las 
cualidades invariantes de todas las soluciones. Dentro de las soluciones de 
Christopher Alexander se encuentran cómo se deben diseñar ciudades y dónde deben
 ir las perillas de las puertas.

Más tarde, en 1987, Ward Cunningham y Kent Beck, sobrepasados por el pobre 
entrenamiento que recibían los nuevos programadores en orientación a objetos, se
 preguntaban cómo se podían capturar las buenas ideas para luego de alguna 
manera traspasarlas a los nuevos programadores recién instruidos en herencia y 
polimorfismo. Leyendo a Alexander se dieron cuenta del paralelo que existía 
entre la buena arquitectura propuesta por Alexander y la buena arquitectura OO, 
de modo que usaron varias ideas de Alexander para desarrollar cinco patrones de 
interacción hombre-ordenador (HCI) y publicaron un artículo en OOPSLA-87 
titulado Using Pattern Languages for OO Programs.

No obstante, no fue hasta principios de la década de 1990 cuando los patrones de
 diseño tuvieron un gran éxito en el mundo de la informática a partir de la 
publicación del libro Design Patterns escrito por el grupo Gang of Four (GoF) 
compuesto por Erich Gamma, Richard Helm, Ralph Johnson y John Vlisides, en el 
que se recogían 23 patrones de diseño comunes.

Objetivo de los patrones.

Los patrones de diseño pretenden:

    Proporcionar catálogos de elementos reusables en el diseño de sistemas 
    software.

    Evitar la reiteración en la búsqueda de soluciones a problemas ya conocidos 
    y solucionados anteriormente.

    Formalizar un vocabulario común entre diseñadores.

    Estandarizar el modo en que se realiza el diseño.

    Facilitar el aprendizaje de las nuevas generaciones de diseñadores 
    ondensando conocimiento ya existente.

Asimismo, no pretenden:

    Imponer ciertas alternativas de diseño frente a otras.

    Eliminar la creatividad inherente al proceso de diseño.

No es obligatorio utilizar los patrones, solo es aconsejable en el caso de tener
 el mismo problema o similar que soluciona el patrón, siempre teniendo en cuenta
 que en un caso particular puede no ser aplicable. "Abusar o forzar el uso de 
los patrones puede ser un error".


Categorías de patrones

Patrones creacionales (Creationals Patterns)

Corresponden a patrones de diseño software que solucionan problemas de creación 
de instancias. Nos ayudan a encapsular y abstraer dicha creación:

    Object Pool (no pertenece a los patrones especificados por GoF).
    Abstract Factory (fábrica abstracta).
    Builder (constructor virtual).
    Factory Method (método de fabricación).
    Prototype (prototipo).
    Singleton (instancia única).
    Model View Controller (MVC) ♙En español: Modelo Vista Controlador. .


Patrones estructurales (Structural Patterns)

Son los patrones de diseño software que solucionan problemas de composición 
(agregación) de clases y objetos:

    Adapter o Wrapper (Adaptador o Envoltorio).
    Bridge (Puente).
    Composite (Objeto compuesto).
    Decorator (Decorador).
    Facade (Fachada).
    Flyweight (Peso ligero).
    Proxy.
    Módulo.

Patrones de comportamiento (behavioral patterns)

Se definen como patrones de diseño software que ofrecen soluciones respecto a la
 interacción y responsabilidades entre clases y objetos, así como los algoritmos
 que encapsulan:

    Chain of Responsibility (Cadena de responsabilidad).
    Command (Orden).
    Interpreter (Intérprete).
    Iterator (Iterador).
    Mediator (Mediador).
    Memento (Recuerdo).
    Observer (Observador).
    State (Estado).
    Strategy (Estrategia).
    Template Method (Método plantilla).
    Visitor (Visitante).





