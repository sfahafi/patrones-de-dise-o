Patrones de comportamiento (Behavioral patterns)

Se definen como patrones de diseño software que ofrecen soluciones respecto a la
 interacción y responsabilidades entre clases y objetos, así como los algoritmos
 que encapsulan:

    Chain of Responsibility (Cadena de responsabilidad): Permite establecer la 
        línea que deben llevar los mensajes para que los objetos realicen la 
        tarea indicada.
        Ideal para trabajo en capas.

    Command (Orden): Encapsula una operación en un objeto, permitiendo ejecutar 
        dicha operación sin necesidad de conocer el contenido de la misma.

    Interpreter (Intérprete): Dado un lenguaje, define una gramática para dicho 
        lenguaje, así como las herramientas necesarias para interpretarlo.

    Iterator (Iterador): Permite realizar recorridos sobre objetos compuestos 
        independientemente de la implementación de estos.

    Mediator (Mediador): Define un objeto que coordine la comunicación entre 
        objetos de distintas clases, pero que funcionan como un conjunto.
    El patrón de diseño Mediator es parecido al patrón Observer 
        (en el que se define una dependencia de tipo 'uno a muchos' entre 
        objetos de forma que cuando el que es observado cambia lo notifica al 
        resto), sin embargo en el primero una clase central encapsula y dirige 
        la comunicación generada entre los demás objetos.

    Memento (Recuerdo): Permite volver a estados anteriores del sistema.

    Observer (Observador): Define una dependencia de uno-a-muchos entre objetos,
         de forma que cuando un objeto cambie de estado se notifique y 
        actualicen automáticamente todos los objetos que dependen de él.
        Ideal para todo tipo de auditorias.

    State (Estado): Permite que un objeto modifique su comportamiento cada vez 
        que cambie su estado interno.
        Trabaja con valores de contexto

    Strategy (Estrategia): Permite disponer de varios métodos para resolver un 
        problema y elegir cuál utilizar en tiempo de ejecución.
        Es parecido a State pero setea algoritmos en tiempo de ejecución.

    Template Method (Método plantilla): Define en una operación el esqueleto de 
        un algoritmo, delegando en las subclases algunos de sus pasos, esto 
        permite que las subclases redefinan ciertos pasos de un algoritmo sin 
        cambiar su estructura.

    Visitor (Visitante): Permite definir nuevas operaciones sobre una jerarquía 
        de clases sin modificar las clases sobre las que opera.



